// Simple test script for HR AI Service
import fetch from 'node-fetch';

const testData = {
  jobDescription: "–ò—â–µ–º Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –æ–ø—ã—Ç–æ–º –≤ SQL –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Python 3+, PostgreSQL, pandas, numpy, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å REST API.",
  resume: "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 3 –≥–æ–¥–∞ Python —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∑–Ω–∞–Ω–∏–µ Excel, PowerBI, –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ SQL. –£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö."
};

async function testHRService() {
  try {
    console.log('üß™ Testing HR AI Service...');
    
    // Test health endpoint
    console.log('\n1. Testing health endpoint...');
    const healthResponse = await fetch('http://localhost:3001/health');
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health check:', healthData);
    
    // Test process-resume endpoint
    console.log('\n2. Testing process-resume endpoint...');
    const response = await fetch('http://localhost:3001/process-resume', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testData)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ Resume processing result:');
    console.log(JSON.stringify(result, null, 2));
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    console.log('\nüîß Troubleshooting tips:');
    console.log('- Make sure HR AI service is running: npm run start:hr');
    console.log('- Ensure Ollama is running: ollama serve');
    console.log('- Verify Gemma 3n model: ollama list');
  }
}

testHRService();